目的:
	1,通过定时器的PWM模式，输出三对不同频率PWM波配置六个推进器
	2,通过配置PWM波频来控制电机转动，从而控制ROV运动
    3,MPU6050 六轴传感器(三轴加速度+三轴陀螺仪)的使用.
	4,抗积分饱和PID算法调控使姿态稳定
	
系统设计：
    1,使用stm32f4作为主控芯片，配置GPIO口输出pwm波，加到电调上输出给无刷电机，使ROV动起来。
	2,利用MPU6050进行姿态解算，获得ROV实时的姿态状况。
	3,利用增量式pid算法对姿态进行调节，至满足设计需求。
	4,pid计算出来的控制量反馈给输入pwm频率
	
硬件资源:
	1,定时器3(TIM3),使用TIM3的通道1和2(CH1&CH2)  GPIOA6&GPIOA7        头部
	2,定时器8(TIM8),使用TIM8的通道1和2(CH1&CH2)  GPIOC6&GPIOC7        尾部
	3,定时器2(TIM2),使用TIM2的通道2和3(CH2&CH3)  GPIOA1&GPIOA2        垂直 
	4,定时器7(TIM7),使用TIM7用于给pid算法提供计时器
	                具体为10ms产生一次中断，中断内进行pid采样及计算
   *5，timer.c中注释掉了TIM1的配置，可以输出互补PWM，可用于电机刹车，如果需要可使用
	6,串口1(波特率:500000,PA9/PA10连接在板载USB转串口芯片CH340上面)
	7,ALIENTEK 2.8/3.5/4.3/7寸TFTLCD模块(通过FSMC驱动,FSMC_NE4接LCD片选/A10接RS)
	8,KEY0按键(连接在PE4)
	9,ALIENTEK MPU6050模块一个(连接在PB10(SCL),PB11(SDA),PA15(AD0)上面,INT未用到).
	  stm32f4自带MPU6050

功能描述：
    1，可以独立调节定时器来改变对应推进器的速度
    2，需手动在程序内调节参数
    3，设立了六种模式，分别对应转向，上下升，前后运动
    4，开机后，先初始化MPU6050，然后利用DMP库，初始化MPU6050及使能DMP，最后，在死循环里面不停
	   读取：温度传感器、加速度传感器、陀螺仪、DMP姿态解算后的欧拉角等数据，通过串口上报给上位机（温
	   度不上报），利用上位机软件（ANO_Tech匿名四轴上位机_V2.6.exe），可以实时显示MPU6050的传感器状
	   态曲线，并显示3D姿态，可以通过KEY0按键开启/关闭数据上传功能。
	   同时，在LCD模块上面显示温度和欧拉角等信息。DS0来指示程序正在运行。另外,也可以通过USMART调用MPU_Read_Byte/MPU_Write_Byte
	   等函数,来实现对MPU6050寄存器的读写操作(仅在UPLOAD OFF状态下).
	5，利用PID算法实现在前进后退，上升下降时由于电机存在小偏差而是运动状态偏行的纠正。但在左右转向并未加入调节，需要航行器自身的平衡。
	
	 
注意事项:
	1,4.3寸和7寸屏需要比较大电流,USB供电可能不足,请用外部电源适配器(推荐外接12V 1A电源).
	2,在LCD_Init函数里面(在ILI93xx.c),用到了printf,如果不初始化串口1,将导致液晶无法显示!!
	3,ANO_Tech匿名四轴上位机使用方法，请看软件文件夹下的README.txt。
	4，运动控制需结合所用电调的使用说明进行配置。
	5，利用抗饱和pid算法调控来控制姿态角以实现ROV的稳定
	   pid算法只应用于调控前进后退，上升下降时对于偏离航道的姿态调节，并不控制电机速度。
	   且在左转右转时，pid不参与调节调节。
	   需要航行器能够自身达到平衡，水平航行时两个垂直推进器不参与。   
   *6,control代码中，pid的内环反馈方式不知道对与否，仔细推敲逻辑.
   *7,需要一个获取函数，获取运动模式的信号

	


			


